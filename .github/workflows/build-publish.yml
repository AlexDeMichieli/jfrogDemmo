name: "JFrog Python Package Publishing"
on: push

permissions:
  id-token: write
  contents: read
  security-events: write  # Required for code scanning alerts

jobs:
  build-publish-python:
    runs-on: ubuntu-latest
    env:
      PYPI_REPO: 'jfrog-dummy-pypi'

    steps:
      # Step 1: Checkout the repository
      - name: Checkout the repository    
        uses: actions/checkout@v3

      # Step 2: Setup JFrog CLI
      - uses: jfrog/setup-jfrog-cli@v4
        name: Setup JFrog CLI
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Required for job summary and security scanning
        with:
          disable-auto-build-publish: false  # Ensure this is false if you want auto-publishing
          disable-job-summary: false  # Ensure the job summary is not disabled

      # Step 3: Configure pip to use JFrog repository
      - name: Configure JFrog pip
        run: jf pip-config --repo-resolve=${{ env.PYPI_REPO }}

      # Step 4: Install dependencies from requirements.txt
      - name: Install dependencies from requirements.txt
        run: jf pip install -r requirements.txt

      # Step 5: Build the Python project (packaging)
      - name: Build the project
        run: python setup.py sdist bdist_wheel

      # Step 6: Publish the Python package to JFrog PyPI
      - name: Publish the Python package
        run: jf rt upload dist/ ${{ env.PYPI_REPO }}/ --module=github-jfrog-pypi

      # Step 7: Publish build info with JFrog CLI
      - name: Publish build info
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          jf rt build-publish

      # Step 8: Run JFrog Build Scan
      - name: Run JFrog Build Scan
        run: jf build-scan
